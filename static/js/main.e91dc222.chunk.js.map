{"version":3,"sources":["factories/MessageFactory.js","components/ChatInput/index.js","redux/action-types.js","components/Message/index.js","components/MessageLoading/index.js","components/Conversation/index.js","App.js","serviceWorker.js","redux/reducer.js","index.js"],"names":["MessageFactory","data","payload","sessionId","queryInput","text","languageCode","axios","post","process","messages","document","getElementsByClassName","children","length","scrollIntoView","behavior","block","ChatInput","dispatch","useDispatch","sendMessage","type","placeholder","onKeyDown","e","keyCode","target","value","preventDefault","message","timestamp","Date","send","then","resp","fulfillmentText","Message","MessageLoading","className","Conversation","useSelector","state","isLoading","waitingBotReply","useEffect","scrollToBottom","map","item","i","key","showLoadingMessage","App","catch","Boolean","window","location","hostname","match","initialState","rootReducer","action","store","createStore","composeWithDevTools","rootElement","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8UA0BeA,E,kGAvBDC,GACV,IAAMC,EAAU,CACdC,UAAW,WACXC,WAAY,CACVC,KAAM,CACJA,KAAMJ,EACNK,aAAc,QAIpB,OAAOC,IAAMC,KAAKC,+EAA0CP,K,uCAK1D,IAAMQ,EAAWC,SAASC,uBAAuB,gBAAgB,GAAGC,SACjEH,EAASA,EAASI,OAAS,IAC5BJ,EAASA,EAASI,OAAS,GAAGC,eAAe,CAACC,SAAU,SAAUC,MAAO,Y,KCElEC,EAjBG,WAChB,IAAMC,EAAWC,cACXC,EAAc,SAAAnB,GAAO,OAAIiB,EAAS,CAAEG,KCPhB,eDOoCpB,aAY9D,OAAO,2BAAOoB,KAAK,OAAOC,YAAY,qBAAqBC,UAXtC,SAAAC,GACD,KAAdA,EAAEC,SAAkBD,EAAEE,OAAOC,MAAMd,SACrCW,EAAEI,iBACFR,EAAY,CAAES,QAASL,EAAEE,OAAOC,MAAOG,UAAW,IAAIC,KAAQV,KAAM,UACpEtB,EAAeiC,KAAKR,EAAEE,OAAOC,OAAOM,MAAK,SAAAC,GACvCd,EAAY,CAAES,QAASK,EAAKlC,KAAKmC,gBAAiBL,UAAW,IAAIC,KAAQV,KAAM,WAEjFG,EAAEE,OAAOC,MAAQ,QEXRS,EAJC,SAAC,GACb,OAD4B,EAAdxB,UCcHyB,G,YAXQ,WACrB,OACE,uBAAGC,UAAU,eACX,+BACA,+BACA,+BACA,kCC2BSC,EA7BM,WACnB,IAAM9B,EAAW+B,aAAY,SAAAC,GAAK,OAAIA,EAAMhC,YACtCiC,EAAYF,aAAY,SAAAC,GAAK,OAAIA,EAAME,mBAS7C,OAHAC,qBAAU,WACR7C,EAAe8C,oBAGf,yBAAKP,UAAU,gBAEb7B,EAASqC,KAAI,SAACC,EAAMC,GAClB,OACE,kBAAC,EAAD,CAASC,IAAKD,GACZ,uBAAGV,UAAWS,EAAK1B,MAChB0B,EAAKlB,aAfS,WACzB,GAAGa,EACD,OAAO,kBAAC,EAAD,MAmBRQ,KCTUC,EAdH,WACV,IAAMjC,EAAWC,cACXC,EAAc,SAACnB,GAAD,OAAaiB,EAAS,CAACG,KJVjB,eIUqCpB,aAI/D,OAHAF,EAAeiC,KAAK,MAAMC,MAAK,SAACC,GAC9Bd,EAAY,CAACS,QAASK,EAAKlC,KAAKmC,gBAAiBL,UAAW,IAAIC,KAAQV,KAAM,WAC7E+B,OAAM,kBAAMhC,EAAY,CAACS,QAAS,2CAA6CC,UAAW,IAAIC,KAAQV,KAAM,aAE7G,yBAAKiB,UAAU,gBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,QCLYe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,olBChBN,IAAMC,EAAe,CACnBjD,SAAU,GACVkC,iBAAiB,GAaJgB,EAXK,WAAmC,IAAlClB,EAAiC,uDAAzBiB,EAAcE,EAAW,uCACpD,MNP0B,iBMOtBA,EAAOvC,KACF,EAAP,GACKoB,EADL,CAEEhC,SAAS,GAAD,mBAAMgC,EAAMhC,UAAZ,CAAsBmD,EAAO3D,UACrC0C,gBAAyC,UAAxBiB,EAAO3D,QAAQoB,OAG7BoB,G,QCJHoB,EAAQC,sBAAYH,EAAaI,iCAEjCC,EAActD,SAASuD,eAAe,QAC5CC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,OAEFG,GFgHI,kBAAmBI,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,kB","file":"static/js/main.e91dc222.chunk.js","sourcesContent":["import axios from \"axios\";\n\nclass MessageFactory {\n  static send(data) {\n    const payload = {\n      sessionId: \"12345678\",\n      queryInput: {\n        text: {\n          text: data,\n          languageCode: \"en\"\n        }\n      }\n    };\n    return axios.post(process.env.REACT_APP_DIALOGFLOW_GATEWAY, payload);\n  }\n\n  static scrollToBottom() {\n\n      const messages = document.getElementsByClassName('conversation')[0].children;\n      if(messages[messages.length - 1]) {\n        messages[messages.length - 1].scrollIntoView({behavior: 'smooth', block: 'end'});\n      }\n\n  }\n}\n\nexport default MessageFactory;","import React from \"react\";\nimport \"./index.css\";\nimport { useDispatch } from \"react-redux\";\nimport { SEND_MESSAGE } from \"../../redux/action-types\";\nimport MessageFactory from \"../../factories/MessageFactory\";\nconst ChatInput = () => {\n  const dispatch = useDispatch();\n  const sendMessage = payload => dispatch({ type: SEND_MESSAGE, payload });\n  const inputKeyDown = e => {\n    if (e.keyCode === 13 && e.target.value.length) {\n      e.preventDefault();\n      sendMessage({ message: e.target.value, timestamp: new Date(), type: \"human\" });\n      MessageFactory.send(e.target.value).then(resp => {\n        sendMessage({ message: resp.data.fulfillmentText, timestamp: new Date(), type: \"bot\" });\n      });\n      e.target.value = \"\";\n    }\n  };\n\n  return <input type=\"text\" placeholder=\"Tell me something!\" onKeyDown={inputKeyDown} />;\n};\n\nexport default ChatInput;\n","export const SEND_MESSAGE = \"SEND_MESSAGE\";\n","const Message = ({children}) => {\n    return children\n}\n\nexport default Message;","import React from \"react\";\nimport \"./index.css\";\n\nconst MessageLoading = () => {\n  return (\n    <p className=\"bot loading\">\n      <span></span>\n      <span></span>\n      <span></span>\n      <span></span>\n    </p>\n  );\n};\n\nexport default MessageLoading;\n","import React, { useEffect } from \"react\";\nimport { useSelector } from 'react-redux';\nimport Message from \"../Message\";\nimport './index.css';\nimport MessageLoading from \"../MessageLoading\";\nimport MessageFactory from \"../../factories/MessageFactory\";\n\nconst Conversation = () => {\n  const messages = useSelector(state => state.messages);\n  const isLoading = useSelector(state => state.waitingBotReply);\n  const showLoadingMessage = () => {\n    if(isLoading) {\n      return <MessageLoading />\n    }\n  }\n  useEffect(() => {\n    MessageFactory.scrollToBottom();\n  });\n  return (\n    <div className=\"conversation\">\n    {\n      messages.map((item, i) => {\n        return (\n          <Message key={i}>\n            <p className={item.type}>\n              {item.message}\n            </p>\n          </Message>\n        );\n      })\n    }\n    {showLoadingMessage()}\n  </div>\n  )\n}\n\nexport default Conversation;\n\n","import React from \"react\";\nimport ChatInput from \"./components/ChatInput\";\nimport Conversation from \"./components/Conversation\";\nimport { useDispatch } from 'react-redux';\nimport { SEND_MESSAGE } from \"./redux/action-types\";\nimport MessageFactory from \"./factories/MessageFactory\";\n\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const sendMessage = (payload) => dispatch({type: SEND_MESSAGE, payload});\n  MessageFactory.send('hi').then((resp) => {\n    sendMessage({message: resp.data.fulfillmentText, timestamp: new Date(), type: 'bot'});\n  }).catch(() => sendMessage({message: 'Looks like you have a connection problem' , timestamp: new Date(), type: 'error'}));\n  return (\n    <div className=\"main-wrapper\">\n        <Conversation />\n        <ChatInput />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SEND_MESSAGE } from \"./action-types\";\n\nconst initialState = {\n  messages: [],\n  waitingBotReply: true,\n}\nconst rootReducer = (state = initialState, action) => {\n  if (action.type === SEND_MESSAGE) {\n    return {\n      ...state,\n      messages: [...state.messages, action.payload],\n      waitingBotReply: action.payload.type === 'human'\n    }\n  }\n  return state;\n}\n\nexport default rootReducer;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport rootReducer from \"./redux/reducer\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(rootReducer, composeWithDevTools())\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}